package hello.core;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CoreApplication {

	public static void main(String[] args) {
		SpringApplication.run(CoreApplication.class, args);
	}

}

/**
 * 객체 지향 프로그래밍
 * - 객체들의 모임
 * - 유연, 변경 용이하다.
 *
 *  🔥 다형성 🔥
 *  < 역할과 구현을 분리!! >
 *  운전자역할, 자동차역할
 *  k3, 아반떼, 테슬라 -> 자동차구현
 *
 *  운전자역할은 자동차를 구현한 각 기종에 의존하는것이 아닌, 자동차 역할에 의존!
 *  운전자가 k3 -> 아반떼로 기종을 변경해도 운전자에 미치는 영향은 없음
 *  + 공연무대 (로미오, 줄리엣 역할) 각 역할을 누가할지는 중요하지않음. 즉 로미오를 장동건이 연기해도 되고, 이병헌이 해도됨. 줄리엣에 영향XXXX
 *
 *  다형성의 본질
 *  1. 인터페이스를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경
 *  2. 본질을 이해하기위해선 "협력" 이라는 객체사이의 관계에서 시작
 *  3. 클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경
 *
 *  한계..
 *  -> 역할자체가 변하면 ? -> 클라이언트,서버 모두 큰 변경발생
 *  -> 자동차를 비행기로 변경? 대본자체가 변경? USB 인터페이스가 변경? -> 인터페이스를 안정적으로 잘 설계하는 것이 중요
 *
 *  스프링과 객체지향
 *  다형성이 가장 중요 !!  스프링은 다형성을 극대화해서 이용할 수 있게 도와준다.
 *  스프링의 제어의 역전(IoC), 의존관계주입(DI)는 다형성을 활용해서 역할,구현을 편리하게 다룰 수 있도록 지원
 *
 *  << 좋은 객체 지향 설계의 5가지 원칙 SOLID>>
 *  1.SRP 단일책임원칙
 *  -> 한 클래스는 하나의 책임만 가져야함
 *    하나의 책임이라는것은 모호하다. 중요한 기준은 "변경"
 *
 *  2.OCP 개방-폐쇄 원칙
 *  -> 소프트웨어 요소는 확장에는 열려있으나 변경에는 닫혀 있어야함
 *  다형성을 활용 (인터페이스를 새로 구현해서 확장)
 *
 *  3.LSP 리스코프 치환 원칙
 *  -> 객체는 프로그램의 정확성을 꺠뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야함
 *  (자동차 인터페이스의 엑셀은 앞으로 가는 기능, 뒤로 가게 구현한다면 이원칙 위반!!)
 *
 *  4.ISP 인터페이스 분리 원칙
 *  -> 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.
 *
 *  5.DIP 의존관계 역전 원칙
 *  -> 구체화(구현)에 의존 ❌ / 추상화(인터페이스)에 의존 ✅
 *
 *  💡정리
 *  1. 객체 지향의 핵심은 다형성
 *  2. 다형성 만으로는 쉽게 부품을 깔아 끼우듯이 개발불가
 *  3. 다형성 만으로는 구현 객체를 변경할때 클라이언트 코드도 변경됨 - OCP,DIP를 지킬수 없음... (뭔가 더필요)
 *
 *  💡 스프링은 다형성 + OCP,DIP를 가능하게 지원 (클라이언트 코드의 변경없이 확장가능)
 *
 *  💡 모든 설계에 역할/구현 분리 -> 이상적으로는 모든 설계에 인터페이스 부여
 *
 *  💡 실무관점 - 인터페이스 도입시 추상화라는 비용이 발생 (코드확인시 한번더 들어가야함..)
 *    -> 기능을 확장할 가능성이 없다면, 구체 클래스를 직접 사용 향후 필요할때 리팩토링해서 인터페이스 도입
 *
여*
 */